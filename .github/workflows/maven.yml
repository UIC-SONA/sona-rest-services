name: CI SONA REST Services

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Set up Configurations pre-build
        run: |
          echo "TESTING"
          mkdir -p google
          echo "${{ secrets.SERVICE_ACCOUNT_STORAGE_JSON }}" | base64 -d > google/service_account_storage.json
          echo "${{ secrets.SERVICE_ACCOUNT_LOGGING_JSON }}" | base64 -d > google/service_account_logging.json
          echo "${{ secrets.SERVICE_ACCOUNT_DIALOGFLOW_JSON }}" | base64 -d > google/service_account_dialogflow.json
          echo "${{ secrets.PROPERTIES }}" > src/main/resources/application.properties

      - name: Integration Test & Unit Test
        run: mvn -B test

      - name: Build and Package with Maven
        run: mvn -B clean package -DskipTests

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: sona-rest-services
          path: target/*.jar

      - name: Send artifact to remote server
        if: success()
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts

          # Crear directorio de destino en el servidor remoto
          ssh -i ~/.ssh/deploy_key $REMOTE_USER@$REMOTE_HOST "mkdir -p $REMOTE_PATH"

          # Copiar los archivos .jar al servidor remoto
          if scp -i ~/.ssh/deploy_key target/*.jar $REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH; then
            echo "Files successfully copied"
          else
            echo "Failed to copy files" && exit 1
          fi

      - name: Deploy to remote server
        uses: appleboy/ssh-action@v1.1.0
        env:
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          envs: REMOTE_PATH
          script: |
            
            # Verificar la versión de Docker
            echo "--------------------------------------------------"
            docker --version
            
            # Cambiar al directorio de destino
            echo "--------------------------------------------------"
            cd $REMOTE_PATH 
            pwd
            
            # Detener los contenedores
            echo "--------------------------------------------------"
            docker compose down
            
            # Reconstruir las imágenes sin usar el cache
            echo "--------------------------------------------------"
            docker compose build --no-cache
            
            # Levantar los contenedores en segundo plano
            echo "--------------------------------------------------"
            docker compose up -d
            
            # Eliminar imágenes no usadas
            echo "--------------------------------------------------"
            docker image prune -f
            
            
            echo "--------------------------------------------------"
            echo "      Deployment completed successfully :3"
            echo "--------------------------------------------------"

